{"version":3,"names":[],"mappings":"","sources":["index.js"],"sourcesContent":["import fs from 'fs';\nimport path from 'path';\nimport url from 'url';\n\nimport hjson from 'hjson';\nimport minimist from 'minimist';\nimport promise from 'promise-callback';\n\nimport core from 'launch-cloud-core';\n\nimport providers from './providers';\n\nimport request from 'request';\n\nimport _ from 'lodash';\n\nrequire('./traceur-runtime');\n\nconst args = minimist(process.argv.slice(2));\n\nif (args._.length === 0) {\n  console.log('Usage: launch-cloud <path_to_your_cloud_description.json>');\n  process.exit(1);\n}\n\nconst proxies = {\n  // dockerHubApiRoot: 'http://localhost:3408',\n  // discoveryEtcdApiRoot: 'http://localhost:3409'\n  dockerHubApiRoot: 'http://104.154.35.244',\n  discoveryEtcdApiRoot: 'http://23.236.50.60',\n  githubRawRoot: 'https://raw.githubusercontent.com'\n};\n\nconst log = (...args) => console.log(...args),\n      api = core({\n        providers,\n        providerConfigs: {\n          amazon: {},\n          digitalocean: {},\n          google: {},\n          microsoft: {},\n          rackspace: {}\n        },\n        log,\n        request,\n        proxies: {}\n      });\n\n\nconst cloudFile = args._[0];\n\nlog('Launching', cloudFile, '...');\nreadCloudFile(cloudFile)\n  .then(parseCloudFile)\n  .then(cloud => {\n    // maybe only do this for the providers being used\n    _.each(providers, provider => {\n      _.each(provider.credentialSchema, (schema, name) => {\n        provider.credentials[name] = process.env[schema.environmentVariable];\n      });\n    });\n    return cloud;\n  })\n  .then(cloud => api.launch(cloud))\n  .catch(e => console.log('Launch Failed', e.stack));\n\nfunction readCloudFile(cloudFile) {\n  console.log('Reading cloudFile');\n  const filePath = path.resolve(cloudFile);\n\n  return promise(fs.readFile, filePath)\n          .then(\n            contents => {console.log(contents); return contents;},\n            result => handleNonLocalFile(result.error, cloudFile));\n\n  function handleNonLocalFile(error, cloudFile) {\n    if (error.code === 'ENOENT') {\n      const parsed = url.parse(cloudFile);\n\n      if (!parsed.host) {\n        parsed.protocol = 'https';\n        parsed.host = 'raw.githubusercontent.com';\n        parsed.path = cloudFile.endsWith('json') ? cloudFile : `${cloudFile}/master/cloud.hjson`;\n      }\n\n      const requestUrl = parsed.format();\n\n      console.log(`cloudFile not found locally. Checking Github...${requestUrl}`);\n\n      return promise(request, requestUrl)\n              .then(result => {return result[1]; });\n    }\n  }\n}\n\nfunction parseCloudFile(contents) {\n  console.log('Parsing cloudFile');\n  return new Promise((resolve, reject) => {\n    try {\n      resolve(hjson.parse(contents.toString()));\n    }\n    catch (ex) { reject(ex); }\n  });\n}"],"file":"index.js","sourceRoot":"/source/"}